#!/usr/bin/perl
#
# Copyright (c) 2016 - 2021  StorPool
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

use v5.10;
use strict;
use warnings;

use File::Basename qw(basename dirname);
use File::Temp;
use Getopt::Std;

my $def_grpname = 'spopenstack';

my $debug = 0;

my @releases = qw(wallaby victoria ussuri train stein rocky queens pike ocata newton mitaka liberty);

my %files = (
	cinder => {
		'exception.py' => [
			{
				type => 'class',
				name => 'StorPoolConfigurationInvalid',
			},
		],
		'volume/drivers/storpool.py' => [
			{
				type => 'new',
			},
		],
	},

	nova => {
		'virt/libvirt/driver.py' => [
			{
				type => 'chunk',
				from => qr/^\s+'storpool=nova\./,
				to => qr/^\s+'iser=nova\./,
				release => [ qw(liberty mitaka newton ocata pike) ],
			},
			{
				type => 'chunk',
				from => qr/^\s+'storpool=nova\./,
				to => qr/^\]/,
				release => [ qw(queens) ],
			},
		],
		'virt/libvirt/volume/storpool.py' => [
			{
				type => 'new',
			},
		],
	},

	os_brick => {
		'initiator/__init__.py' => [
			{
				type => 'chunk',
				from => qr/^STORPOOL = /,
				to => qr/^LOCAL = /,
			},
		],
		'initiator/connector.py' => [
			{
				type => 'chunk',
				from => qr/^STORPOOL = /,
				to => qr/^LOCAL = /,
				release => [ qw(liberty mitaka) ],
			},
			{
				type => 'chunk',
				from => qr/^\s+elif protocol == STORPOOL/,
				to => qr/^\s+elif protocol == LOCAL/,
				release => [ qw(liberty mitaka) ],
			},
			{
				type => 'class',
				name => 'StorPoolConnector',
				release => [ qw(liberty mitaka) ],
			},
			{
				type => 'chunk',
				from => qr/^\s+initiator\.STORPOOL:$/,
				to => qr/^\s+initiator\.LOCAL:$/,
				release => [ qw(newton ocata pike) ],
			},
		],
		'initiator/connectors/storpool.py' => [
			{
				type => 'new',
			},
		],
	},
);

my %components = (
	cinder => {
		wallaby => {
			detect => {
				file => 'volume/driver.py',
				present => qr{volume_utils\.brick_get_connector_properties},
			}
		},

		victoria => {
			detect => {
				file => 'exception.py',
				present => qr{^\s*class\s+VolumeTypeProjectDefaultNotFound\s*[(]},
			}
		},

		ussuri => {
			detect => {
				file => 'exception.py',
				present => qr{^\s*class\s+GlanceStoreNotFound\s*[(]},
			}
		},

		train => {
			detect => {
				file => 'exception.py',
				present => qr{^\s*class\s+VolumeTypeDefault\s*[(]},
			}
		},

		stein => {
			detect => {
				file => 'volume/driver.py',
				present => qr{^\s*scst_opts\s*=},
			}
		},

		rocky => {
			detect => {
				file => 'volume/driver.py',
				present => qr{^\s*nvmet_opts\s*=},
			}
		},

		queens => {
			detect => {
				file => 'volume/driver.py',
				present => qr{^\s+def\s+snapshot_revert_use_temp_snapshot},
			}
		},

		pike => {
			detect => {
				file => 'volume/driver.py',
				present => qr{^from os_brick import exception as brick_exception},
			}
		},

		ocata => {
			detect => {
				file => 'volume/driver.py',
				present => qr{^\s+def\s+supports_replication_feature\s*\(},
			}
		},

		mitaka => {
			detect => {
				file => 'volume/driver.py',
				present => qr{^\s+def\s+_create_temp_volume_from_snapshot\s*\(},
			}
		},

		liberty => {
			detect => {
				file => 'volume/driver.py',
				present => qr{^\s+def\s+_detach_snapshot\s*\(},
			}
		},
	},

	glance => {
		wallaby => {
			detect => {
				file => 'api/v2/images.py',
				present => qr{^\s*def\s+proxy_response_error\s*[(]},
			}
		},

		victoria => {
			detect => {
				file => 'async_/__init__.py',
				present => qr{^\s*class\s+ThreadPoolModel},
			}
		},

		ussuri => {
			detect => {
				file => 'api/v2/images.py',
				present => qr{^\s*import\s+datetime},
			}
		},

		train => {
			detect => {
				file => 'common/store_utils.py',
				present => qr{^\s*def\s+check_reserved_stores\s*[(]},
			}
		},

		stein => {
			detect => {
				file => 'api/policy.py',
				present => qr{^\s*def\s+get_enforcer\s*[(]},
			}
		},

		rocky => {
			detect => {
				file => 'api/v2/discovery.py',
				present => qr{^\s*def\s+get_stores\s*[(]},
			}
		},

		queens => {
			detect => {
				file => 'cmd/cache_manage.py',
				present => qr{^\s*import\s+argparse},
			}
		},

		pike => {
			detect => {
				file => 'api/v2/discovery.py',
				present => qr{^\s*class\s+InfoController\s*[(]},
			}
		},
	},

	nova => {
		wallaby => {
			detect => {
				file => 'virt/libvirt/driver.py',
				present => qr{^\s*class\s+Waiter\s*:},
			}
		},

		victoria => {
			detect => {
				file => 'virt/libvirt/driver.py',
				present => qr{^\s*def\s+cleanup_lingering_instance_resources\s*[(]},
			}
		},

		ussuri => {
			detect => {
				file => 'virt/libvirt/driver.py',
				present => qr{^\s*def\s+static_traits\s*[(]},
			}
		},

		train => {
			detect => {
				file => 'virt/libvirt/driver.py',
				present => qr{^\s*def\s+post_claim_migrate_data\s*[(]},
			}
		},

		stein => {
			detect => {
				file => 'virt/libvirt/driver.py',
				present => qr{^\s*def\s+extend_volume\s*[(].*,\s*requested_size},
			}
		},

		rocky => {
			detect => {
				file => 'virt/libvirt/driver.py',
				present => qr{^\s*def\s+get_info\s*[(].*,\s*use_cache},
			}
		},

		queens => {
			detect => {
				file => 'virt/libvirt/driver.py',
				present => qr{^\s*def\s+_guest_add_usb_host_keyboard\s*[(]},
			}
		},

		pike => {
			detect => {
				file => 'virt/libvirt/driver.py',
				present => qr{^\s*def\s+extend_volume\s*[(]},
			}
		},

		ocata => {
			detect => {
				file => 'virt/libvirt/driver.py',
				present => qr{MIN_LIBVIRT_PARALLELS_SET_ADMIN_PASSWD},
			}
		},

		mitaka => {
			detect => {
				file => 'virt/libvirt/driver.py',
				present => qr{DEFAULT_UEFI_LOADER_PATH},
			}
		},

		liberty => {
			detect => {
				file => 'virt/libvirt/driver.py',
				present => qr{^\s+def\s+inject_nmi\s*\(},
			}
		},
	},

	os_brick => {
		mitaka => {
			detect => {
				file => 'initiator/connector.py',
				present => qr{^\s+def\s+get_search_path\s*\(},
			}
		},

		liberty => {
			detect => {
				file => 'initiator/connector.py',
				present => qr{^class InitiatorConnector},
			}
		},

		newton => {
			detect => {
				file => 'initiator/connector.py',
				present => qr{^connector_list = \[},
			}
		},

		ocata => {
			detect => {
				file => 'exception.py',
				present => qr{^class InvalidConnectorProtocol},
			}
		},

		pike => {
			detect => {
				file => 'exception.py',
				present => qr{^class ExceptionChainer},
			}
		},

		queens => {
			detect => {
				file => 'initiator/connector.py',
				present => qr{^\s*initiator\.NVME\s*:},
			}
		},

		rocky => {
			detect => {
				file => 'initiator/connector.py',
				present => qr{^\s*def\s+get_connector_mapping\s*[(]},
			}
		},

		stein => {
			detect => {
				file => 'initiator/connector.py',
				present => qr{^\s+initiator\.NVMEOF:},
			}
		},

		train => {
			detect => {
				file => 'initiator/connector.py',
				present => qr{os_brick\.initiator\.connectors\.nvmeof\.NVMeOFConnector},
			}
		},

		ussuri => {
			detect => {
				file => 'tests/initiator/test_linuxscsi.py',
				present => qr{^\s*def\s+test_get_device_info\s*[(]},
			}
		},

		victoria => {
			detect => {
				file => 'caches/__init__.py',
				present => qr{^\s*class\s+CacheEngineBase\s*[(]},
			}
		},

		wallaby => {
			detect => {
				file => 'initiator/connector.py',
				present => qr{os_brick\.initiator\.windows\.rbd\.WindowsRBDConnector},
			}
		},
	},
);

my @all_components = sort keys %components;
my (@search_paths, @search_paths_prepend);

my ($grpname, $username);
my $spooldir = '/var/spool/openstack-storpool';
my $spoolfile = "$spooldir/openstack-attach.json";

my $txn_module;

sub usage($)
{
	my ($err) = @_;
	my $s = <<"EOUSAGE" ;
Usage:	sp-openstack [-v] [-L paths] check [components...]
	sp-openstack [-v] [-L paths] detect [components...]
	sp-openstack [-v] [-g grpname] [-L paths] [-T module] [-u username] groups [components...]
	sp-openstack [-v] [-g grpname] [-L paths] [-T module] [-u username] install [components...]
	sp-openstack help
	sp-openstack version
	sp-openstack -V | -h

	-g	specify the group for the shared state files
		(default: $def_grpname)
	-h	display program usage information and exit
	-L	specify the paths (separated by ':') to search for
		Python modules
	-u	specify the service username to add to the group
		(default: the same as the component name)
	-T	use the txn-install utility to record the modified files
		and pass it the specified module name
	-V	display program version information and exit
	-v	verbose operation; display diagnostic output

Commands:
	check	check if the StorPool integration has been installed
	detect	determine the versions of the installed OpenStack components
	groups	set up the spopenstack group and the spool directory
	help	display program usage information and exit
	install	deploy the StorPool integration
	version	display program version information and exit
EOUSAGE

	if ($err) {
		die $s;
	} else {
		print "$s";
	}
}

sub version()
{
	say 'sp-openstack 1.5.0';
}

sub debug($)
{
	say STDERR $_[0] if $debug;
}

sub check_wait_result($ $ $)
{
	my ($stat, $pid, $name) = @_;
	my $sig = $stat & 127;
	if ($sig != 0) {
		die "Program '$name' (pid $pid) was killed by signal $sig\n";
	} else {
		my $code = $stat >> 8;
		if ($code != 0) {
			die "Program '$name' (pid $pid) exited with non-zero status $code\n";
		}
	}
}

sub run_program(@)
{
	my (@cmd) = @_;
	my $name = $cmd[0];

	my $pid = open my $f, '-|';
	if (!defined $pid) {
		die "Could not fork for $name: $!\n";
	} elsif ($pid == 0) {
		debug "About to run '@cmd'";
		exec { $name } @cmd;
		die "Could not execute '$name': $!\n";
	}
	my @res = <$f>;
	close $f;
	check_wait_result $?, $pid, $name;
	return @res;
}

sub get_python_dirs()
{
	return @search_paths if @search_paths;

	my @lines = map { chomp; $_ } run_program 'python3', '-c',
	    'from __future__ import print_function; import sys; print("\n".join(sys.path))';
	die "Python did not report a module search path at all\n"
	    unless @lines;
	@lines = grep length && -d, @lines;
	die "Python did not report any existing module directories\n"
	    unless @lines;
	@search_paths = (@search_paths_prepend, @lines);
	return @search_paths;
}

sub detect_openstack(@)
{
	my @components = @_;

	my @paths = get_python_dirs;
	debug "Looking for the OpenStack releases for @components in @paths";
	my (%found, %rels);
	my @missing;
	for my $comp (@components) {
		debug "- $comp";
		for my $path (@paths) {
			debug "  - $path";
			for my $rel (@releases) {
				my $d = $components{$comp}{$rel}{detect};
				next unless defined $d;

				my $fname = "$path/$comp/$d->{file}";
				next unless -f $fname;
				open my $f, '<', $fname or
				    die "Could not open $fname: $!\n";
				while (my $line = <$f>) {
					chomp $line;
					if ($line =~ $d->{present}) {
						debug "    - found!";
						$found{$comp} = {
							release => $rel,
							path => $path,
						};
						$rels{$rel} = 1;
						last;
					}
				}
				close $f or
				    die "Could not close $fname: $!\n";
				last if $found{$comp};
			}
			last if $found{$comp};
		}

		if (!$found{$comp}) {
			debug "  - could not find $comp";
			push @missing, $comp;
		}
	}
	return (
		found => \%found,
		missing => \@missing,
		releases => [sort keys %rels],
	);
}

sub detect_and_report(@)
{
	my @components = @_;

	my %data = detect_openstack @components;
	die "Could not find some OpenStack components: @{$data{missing}}\n"
	    if @{$data{missing}};
	say 'Found the following OpenStack components:';
	for my $comp (@components) {
		printf "%-20s %-10s %s\n", $comp,
		    $data{found}{$comp}{release},
		    $data{found}{$comp}{path};
	}
	die "Mismatched OpenStack releases\n" if @{$data{releases}} > 1;
	return %data;
}

sub get_components(@)
{
	my @args = sort @_;

	return @all_components unless @args;
	my @missing = grep !defined $components{$_}, @args;
	die "Invalid OpenStack component names specified: @missing; ".
	    "valid ones: @all_components\n" if @missing;
	return @args;
}

sub get_source_path($ $ $)
{
	my ($file, $comp, $release) = @_;

	return "drivers/$comp/openstack/$release/$file";
}

sub get_destination_path($ $ $)
{
	my ($file, $comp, $path) = @_;

	return "$path/$comp/$file";
}

sub data_copy($)
{
	my ($data) = @_;
	my @res = ();

	for my $chunk (@{$data}) {
		my %new = %{$chunk};
		delete $new{data};
		push @res, \%new;
	}
	return \@res;
}

sub scan_template_file($ $)
{
	my ($fname, $data) = @_;

	for my $d (@{$data}) {
		if ($d->{type} eq 'chunk') {
			$d->{data} = { res => undef, done => 0 };
		} elsif ($d->{type} eq 'class') {
			$d->{data} = {
				res => undef,
				done => 0,
				from => qr{^class\s+\Q$d->{name}\E\s*[(]},
			};
		} else {
			die "Internal error: invalid data type $d->{type}\n";
		}
	}

	open my $f, '<', $fname or
	    die "Could not open $fname: $!\n";
	while (<$f>) {
		my $in = 0;
		for my $d (@{$data}) {
			if ($d->{type} eq 'chunk') {
				if ($d->{data}->{done}) {
					if ($_ =~ $d->{from}) {
						die "Duplicate match for '$d->{from}' in $fname\n";
					}
				} elsif (!defined $d->{data}->{res}) {
					if ($_ =~ $d->{from}) {
						$d->{data}->{res} = $_;
						$in++;
					}
				} else {
					$in++;
					if ($_ =~ $d->{to}) {
						$d->{data}->{done} = 1;
					} else {
						$d->{data}->{res} .= $_;
					}
				}
			} elsif ($d->{type} eq 'class') {
				if ($d->{data}->{done}) {
					if ($_ =~ $d->{data}->{from}) {
						die "Duplicate match for class '$d->{name}' in $fname\n";
					}
				} elsif (!defined $d->{data}->{res}) {
					if ($_ =~ $d->{data}->{from}) {
						$d->{data}->{res} = $_;
						$in++;
					}
				} else {
					$in++;
					if ($_ eq "\n" && $d->{data}->{res} =~ /\n\n\Z/) {
						$d->{data}->{res} =~ s/\n\Z//;
						$d->{data}->{done} = 1;
					} else {
						$d->{data}->{res} .= $_;
					}
				}
			} else {
				die "Internal error: shouldn't have reached this point with chunk type '$d->{type}'";
			}
		}
		if ($in > 1) {
			die "More than one match for line $. in $fname\n";
		}
	}
	close $f or
	    die "Could not close $fname: $!\n";

	for my $d (@{$data}) {
		next unless $d->{type} eq 'class' &&
		    defined $d->{data}->{res} &&
		    !$d->{data}->{done};
		$d->{data}->{done} = 1;
		$d->{data}->{res} =~ s/\n+\Z/\n/;
	}
}

sub compare_files($ $)
{
	my ($src, $dst) = @_;

	open my $fsrc, '<', $src or
	    die "Could not open $src: $!\n";
	open my $fdst, '<', $dst or
	    die "Could not open $dst: $!\n";

	while (my $srcline = <$fsrc>) {
		my $dstline = <$fdst>;

		if (!defined $dstline || $dstline ne $srcline) {
			close $fsrc;
			close $fdst;
			return 0;
		}
	}

	close $fsrc;
	my $dstline = <$fdst>;
	close $fdst;
	return !defined $dstline;
}

sub mkdir_p_rec($ $)
{
	my ($base, $dir) = @_;
	my $new = "$base/$dir";

	return 1 if -d $new;
	return 1 if mkdir $new;
	die "Could not create the directory $new: $!\n" unless $!{ENOENT};

	my $up = dirname $dir;
	if ($up eq $dir || $up =~ /^(.|\/|)$/) {
		return 0;
	}
	return 0 unless mkdir_p_rec $base, $up;
	return 1 if mkdir $new;
	die "Could not create the directory $new: $!\n";
}

sub mkdir_p_basedir($ $)
{
	my ($base, $dir) = @_;

	if (! -d $base) {
		die "The base directory $base does not exist\n";
	}
	if (!mkdir_p_rec $base, dirname $dir) {
		die "Could not create $base/$dir or its predecessors\n";
	}
	return 1;
}

sub copy_file($ $)
{
	my ($srcname, $dstname) = @_;

	open my $src, '<', $srcname or
	    die "Could not open $srcname: $!\n";
	open my $dst, '>', $dstname or
	    die "Could not open $dstname: $!\n";
	{
		local $/;
		my $contents = <$src>;
		print $dst $contents;
	}
	close $dst or die "Could not close $dstname: $!\n";
	close $src or die "Could not close $srcname: $!\n";
}

sub pad_with_newlines($ $ $)
{
	my ($f, $current, $wanted) = @_;

	print $f "\n" x ($wanted - $current) if $wanted > $current;
}

sub count_newlines($)
{
	my ($text) = @_;

	if ($text =~ /(\n+)\Z/) {
		return length($1) - 1;
	} else {
		return 0;
	}
}

sub update_file($ $ $ $)
{
	my ($srcname, $dstname, $dst, $data) = @_;

	open my $src, '<', $srcname or
	    die "Could not open $srcname: $!\n";

	for my $d (@{$data}) {
		if (!defined $d->{data}->{res}) {
			die "Internal error: found an ungathered piece of $d->{type} from the template of $srcname\n";
		}

		$d->{data}->{in} = $d->{data}->{done} = 0;

		if ($d->{type} eq 'chunk') {
			;
		} elsif ($d->{type} eq 'class') {
			if (!defined $d->{data}->{from}) {
				die "Internal error: found an unprocessed class $d->{name} from the template of $srcname\n";
			}
		} else {
			die "Internal error: invalid data type $d->{type}\n";
		}
	}

	my ($last, $newlines) = ("", 0);
	while (<$src>) {
		my ($copy, $in) = (1, 0);

		for my $d (@{$data}) {
			if ($d->{type} eq 'chunk') {
				if ($d->{data}->{done}) {
					if ($_ =~ $d->{from}) {
						die "Duplicate match for '$d->{from}' in $srcname\n";
					}
				} elsif (!$d->{data}->{in}) {
					if ($_ =~ $d->{from}) {
						$d->{data}->{in} = 1;
						$copy = 0;
						$in++;
					} elsif ($_ =~ $d->{to}) {
						say "Outputting a chunk to $dstname";
						$d->{data}->{done} = 1;
						print $dst $d->{data}->{res};
						$newlines = count_newlines $d->{data}->{res};
					}
				} else {
					if ($_ =~ $d->{to}) {
						say "Outputting a chunk to $dstname";
						$d->{data}->{in} = 0;
						$d->{data}->{done} = 1;
						print $dst $d->{data}->{res};
						$newlines = count_newlines $d->{data}->{res};
					} else {
						$copy = 0;
						$in++;
					}
				}
			} elsif ($d->{type} eq 'class') {
				if ($d->{data}->{done}) {
					if ($_ =~ $d->{data}->{from}) {
						die "Duplicate match for class '$d->{name}' in $srcname\n";
					}
				} elsif (!$d->{data}->{in}) {
					if ($_ =~ $d->{data}->{from}) {
						debug "Found class $d->{name} in $srcname";
						$d->{data}->{in} = 1;
						$copy = 0;
						$in++;
					}
				} else {
					if ($_ eq "\n" && $last eq "\n") {
						say "Outputting class $d->{name} to $dstname";
						$d->{data}->{in} = 0;
						$d->{data}->{done} = 1;
						pad_with_newlines $dst, $newlines, 2;
						print $dst $d->{data}->{res};
						$newlines = count_newlines $d->{data}->{res};
					}
					$copy = 0;
					$in++;
				}
			}
		}

		if ($in > 1) {
			die "Multiple matches for line $. in $srcname\n";
		}
		if ($copy) {
			if ($_ eq "\n") {
				$newlines++;
			} else {
				$newlines = 0;
			}
			print $dst $_;
		}
		$last = $_;
	}

	# Append the unmatched classes to the end of the file
	for my $d (@{$data}) {
		next if $d->{data}->{done};

		if ($d->{type} eq 'chunk') {
			die "Unmatched chunk in $srcname:\n$d->{data}->{res}\n";
		} elsif ($d->{type} eq 'class') {
			say "Adding class $d->{name} to the end of $dstname";
			pad_with_newlines $dst, $newlines, 2;
			print $dst $d->{data}->{res};
			$newlines = count_newlines $d->{data}->{res};
		}
	}

	close $src or
	    die "Could not close $srcname: $!\n";
}

sub mimic_stat($ $)
{
	my ($fname, $src) = @_;

	my @dst = stat $fname;
	die "Could not obtain information about $fname: $!\n" unless @dst;

	if ($src->[2] != $dst[2]) {
		chmod $src->[2], $fname or
		   die sprintf("Could not set the mode of %s to %o: %s\n",
		   $fname, $src->[2], $!);
	}
	if ($src->[4] != $dst[4] || $src->[5] != $dst[5]) {
		chown $src->[4], $src->[5], $fname or
		    die "Could not set the owner of $fname to $src->[4] ".
		    "and the group to $src->[5]: $!\n";
	}
}

sub txn_install(@)
{
	my (@args) = @_;

	run_program 'env', "TXN_INSTALL_MODULE=$txn_module", 'txn', '--', 'install', @args;
}

sub do_integration($ %)
{
	my ($check_only, %data) = @_;

	debug ''.($check_only? 'Checking for ': 'Installing the ').
	    'StorPool integration for '.join ', ', sort keys %{$data{found}};

	my %res;
COMPONENT:
	for my $comp (sort keys %{$data{found}}) {
		if (!$check_only) {
			say "\nInstalling the StorPool integration for $comp\n";
		} else {
			debug "- $comp";
		}
		my ($release, $path) =
		    @{$data{found}{$comp}}{qw(release path)};
		my @files_list = grep { -f get_source_path $_, $comp, $release } keys %{$files{$comp}};
		if (!@files_list) {
			die "Internal error: no files found for $comp/$release\n";
		}
		for my $file (@files_list) {
			my $f = $files{$comp}{$file};
			die "Internal error: no definition for $file\n"
			    unless defined $f;
			debug "  - $file: ".scalar(@{$f})." chunks: ".join ', ', map $_->{type}, @{$f};
			$f = [
				grep {
					my $def = $_;
					!defined $def->{release} || grep $_ eq $release, @{$def->{release}}
				} @{$f}
			];
			debug "  - $file (filtered): ".scalar(@{$f})." chunks: ".join ', ', map $_->{type}, @{$f};

			my $src = get_source_path $file, $comp, $release;
			if (! -f $src) {
				die "Internal error: $src does not exist\n";
			}

			my $dst = get_destination_path $file, $comp, $path;
			if (@{$f} == 1 && $f->[0]{type} eq 'new') {
				if ($check_only) {
					if (! -f $dst) {
						$res{$comp} = "$dst does not exist";
						next COMPONENT;
					} elsif (!compare_files $src, $dst) {
						$res{$comp} = "$dst is not the same as $src";
						next COMPONENT;
					}
				} else {
					say "Creating new file $dst";
					mkdir_p_basedir "$path/$comp", $file;
					if (defined $txn_module) {
						txn_install '-m', '644', '--', $src, $dst;
					} else {
						copy_file $src, $dst;
						chmod 0644, $dst or
						   die "Could not make $dst world-readable: $!\n";
					}
				}
				next;
			} elsif (! -f $dst) {
				die "OpenStack installation problem: $dst does not exist\n";
			}
			
			my $dsrc = data_copy $f;
			scan_template_file $src, $dsrc;
			for my $chunk (@{$dsrc}) {
				die "Internal error: could not find a chunk in $src\n"
				    unless $chunk->{data}{done};
			}

			if ($check_only) {
				my $ddst = data_copy $f;
				eval {
					scan_template_file $dst, $ddst;
				};
				if ($@) {
					my $msg = $@;
					1 while chomp $msg;
					$res{$comp} = "Scanning $dst: $msg";
					next COMPONENT;
				}
				for (my $i = 0; $i < @{$dsrc}; $i++) {
					my $type = $ddst->[$i]{type};
					if (!$ddst->[$i]{data}{done}) {
						$res{$comp} = "Could not find a chunk in $dst";
						next COMPONENT;
					} elsif ($ddst->[$i]{data}{res} ne $dsrc->[$i]{data}{res}) {
						$res{$comp} = "A chunk in $dst is not the same as the one in $src";
						next COMPONENT;
					}
				}
			} else {
				my @stat = stat $dst;
				die "Could not obtain information about $dst: $!\n"
				    unless @stat;

				my $dstdir = dirname($dst);
				my $tempfile = File::Temp->new(
				    TEMPLATE => basename($dst).'.XXXXXX',
				    DIR => $dstdir);
				die "Could not create a temporary file in ".
				    "$dstdir: $!\n" unless defined $tempfile;
				my $tempname = $tempfile->filename;
				say "Created a temporary file $tempname";

				update_file $dst, $tempname, $tempfile, $dsrc;
				close $tempfile or
				    die "Could not close the temporary file $tempname: $!\n";

				say "Renaming $tempname to $dst";
				if (defined $txn_module) {
					txn_install '--', $tempname, $dst;
				} else {
					rename $tempname, $dst or
					    die "Could not rename $tempname to $dst: $!\n";
					$tempfile->unlink_on_destroy(0);
				}
				mimic_stat $dst, \@stat;
			}
		}
	}

	debug 'Seems everything is in order' unless %res;
	return %res;
}

sub setup_group($)
{
	my ($grpname) = @_;

	say "\nCreating the $grpname group";
	run_program 'groupadd', '--system', '--', $grpname;
}

sub setup_group_member($ $)
{
	my ($grpname, $comp) = @_;

	my @lines = map { chomp; $_ } run_program 'id', '-Gn', '--', $comp;
	if (@lines != 1) {
		die "Unexpected output from 'id -Gn -- $comp':\n".
		    join("\n", @lines)."\n";
	}
	my @users = split /\s+/, $lines[0];
	if (grep $_ eq $grpname, @users) {
		say "\n$comp is already a member of the $grpname group";
		return;
	}
	say "\nAdding $comp to the $grpname group";
        run_program 'usermod', '-G', join(',', @users, $grpname), '--', $comp;
}

sub setup_file($ $ $)
{
	my ($grpname, $spooldir, $spoolfile) = @_;

	my $n = "\n";
	my $nsay = sub { say "$n$_[0]"; $n = ''; };

	my @grp = getgrnam $grpname;
	die "Internal error: the $grpname group should exist by now\n"
	    unless @grp;

	if (! -d $spooldir) {
		$nsay->("Creating $spooldir");
		mkdir $spooldir, 0770 or
		    die "Could not create $spooldir: $!\n";
	}
	my @stat = stat $spooldir;
	if (!@stat) {
		die "Could not obtain information about $spooldir: $!\n";
	}
	if (($stat[2] & 0777) != 0770) {
		$nsay->("Setting the mode of $spooldir to 0770");
		$n = '';
		chmod 0770, $spooldir or
		    die "Could not set the mode of $spooldir: $!\n";
	}
	if ($stat[4] != 0 || $stat[5] != $grp[2]) {
		$nsay->("Setting the ownership of $spooldir to root:$grpname");
		$n = '';
		chown 0, $grp[2], $spooldir or
		    die "Could not set the ownership of $spooldir: $!\n";
	}

	if (! -f $spoolfile) {
		$nsay->("Creating $spoolfile");
		$n = '';
		if (defined $txn_module) {
			my $tempfile = File::Temp->new(TEMPLATE => 'openstack-attach.json.XXXXXX', DIR => $spooldir);
			print $tempfile '{}';
			close $tempfile;
			txn_install '--', $tempfile->filename, $spoolfile;
		} else {
			open my $f, '>', $spoolfile or
			    die "Could not create $spoolfile: $!\n";
			print $f '{}';
			close $f or
			    die "Could not close $spoolfile: $!\n";
		}
	}
	@stat = stat $spoolfile;
	if (!@stat) {
		die "Could not obtain information about $spoolfile: $!\n";
	}
	if (($stat[2] & 0777) != 0660) {
		$nsay->("Setting the mode of $spoolfile to 0660");
		$n = '';
		chmod 0660, $spoolfile or
		    die "Could not set the mode of $spoolfile: $!\n";
	}
	if ($stat[4] != 0 || $stat[5] != $grp[2]) {
		$nsay->("Setting the ownership of $spoolfile to root:$grpname");
		$n = '';
		chown 0, $grp[2], $spoolfile or
		    die "Could not set the ownership of $spoolfile: $!\n";
	}
}

sub setup_group_and_file($)
{
	my ($comp) = @_;

	my @grp = getgrnam $grpname;
	if (!@grp) {
		setup_group $grpname;
		@grp = getgrnam $grpname;
		die "Could not set up the $grpname group\n" unless @grp;
	}
	setup_group_member $grpname, $username // $comp;
	setup_file $grpname, $spooldir, $spoolfile;
}

sub cmd_check($ @)
{
	my ($cmd, @args) = @_;

	my @components = get_components @args;
	my %data = detect_and_report @components;
	my %res = do_integration 1, %data;
	if (%res) {
		debug "The installation check returned:\n".
		    join("\n", map "\t$_\t$res{$_}", sort keys %res);
		die "The StorPool OpenStack integration is either ".
		    "not installed or not up to date for ".
		    join(', ', sort keys %res)."\n";
	}
	say 'The StorPool OpenStack integration is installed';
}

sub cmd_detect($ @)
{
	my ($cmd, @args) = @_;

	my @components = get_components @args;
	detect_and_report @components;
}

sub check_groups(@)
{
	my (@components) = @_;

	for my $c (@components) {
		next unless $c eq 'cinder' || $c eq 'nova' || $c eq 'glance';
		if ($> == 0) {
			setup_group_and_file $c;
		} else {
			say 'Not running as root, skipping the group and spoolfile checks';
		}
	}
}

sub cmd_groups($ @)
{
	my ($cmd, @args) = @_;
	my @components = get_components @args;
	check_groups @components;
}

sub cmd_install($ @)
{
	my ($cmd, @args) = @_;

	my @components = get_components @args;
	my %data = detect_and_report @components;
	do_integration 0, %data;

	check_groups @components;

	say "\nAll done!";
}

my %cmds = (
	check	=> \&cmd_check,
	detect	=> \&cmd_detect,
	groups	=> \&cmd_groups,
	help	=> sub { usage 0 },
	install	=> \&cmd_install,
	version	=> sub { version },
);

sub run_command($ $ @)
{
	my ($commands, $cmd, @args) = @_;

	my @match = sort grep /^\Q$cmd\E/, keys %{$commands};
	if (@match == 0) {
		die "Invalid command '$cmd', expected one of ".
		    join(', ', map "'$_'", sort keys %{$commands})."\n";
	} elsif (@match > 1) {
		die "Ambiguous command '$cmd': ".
		    join(', ', map "'$_'", @match)."\n";
	}

	$cmd = $match[0];
	my $c = $commands->{$cmd};
	if (ref $c eq 'CODE') {
		return $c->($cmd, @args);
	} else {
		die "Internal error: command '$cmd' ".
		    "ref '".(ref($c) // 'undef')."'\n";
	}
}

MAIN:
{
	my %opts;

	getopts('g:hL:T:u:Vv', \%opts) or usage 1;
	version if $opts{V};
	usage 0 if $opts{h};
	exit 0 if $opts{V} || $opts{h};
	$debug = $opts{v};

	$grpname = $opts{g} // $def_grpname;
	$username = $opts{u};
	
	$txn_module = $opts{T};

	if (defined $opts{L}) {
		my @dirs = split /:/, $opts{L};
		@search_paths_prepend = grep -d && -x, @dirs;
		die "Nonexistent or unreadable directories in @dirs\n"
		    if @search_paths_prepend != @dirs;
		debug "More Python search paths: @search_paths_prepend";
	}

	if (@ARGV == 0) {
		warn "No command specified\n";
		usage 1;
	}
	my ($cmd, @args) = @ARGV;
	run_command \%cmds, $cmd, @args;
}
